# DROP TABLES
songplay_table_drop = "DROP TABLE IF EXISTS songplays"
user_table_drop = "DROP TABLE IF EXISTS users"
song_table_drop = "DROP TABLE IF EXISTS songs"
artist_table_drop = "DROP TABLE IF EXISTS artists"
time_table_drop = "DROP TABLE IF EXISTS time"

# CREATE TABLES
# ?? when inserting data will redferences matter (think of order and constraint)
# also think of timestamptz tiem when ingesting and convert at source (json/pandas)
# note: No NULL value can not be accepted in PRIMARY KEY https://tinyurl.com/veyy8hm
user_table_create = (
    """
    CREATE TABLE IF NOT EXISTS users (
        user_id INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
        first_name TEXT,
        last_name TEXT,
        gender VARCHAR(1),
        level VARCHAR(10)
    );
    """
    )


artist_table_create = (
    """
    CREATE TABLE IF NOT EXISTS artists (
        artist_id TEXT PRIMARY KEY,
        artist_name TEXT,
        artist_location TEXT,
        artist_latitude NUMERIC(5, 3),
        artist_longitude NUMERIC(5, 3)
    );
    """
    )


song_table_create = (
    """
    CREATE TABLE IF NOT EXISTS songs (
        song_id TEXT PRIMARY KEY,
        title TEXT,
        artist_id TEXT references artists,
        year INT,
        duration NUMERIC(6, 3)
    );
    """
    )

# How to extract int values from timestamp?
# day is like 11th of november == 11
time_table_create = (
    """
    CREATE TABLE IF NOT EXISTS time (
        start_time TIMESTAMPTZ PRIMARY KEY,
        hour INT,
        day INT,
        week INT,
        month INT,
        year INT,
        weekday INT
    );
    """
    )

# Fact table is last due to references constraints
# think do_datepart
# or postgres https://tinyurl.com/rplkxo9 https://tinyurl.com/t6jn5wc
songplay_table_create = (
    """
    CREATE TABLE IF NOT EXISTS songplays (
        artist_id TEXT references artists,
        level VARCHAR(10),
        location TEXT,
        session_id INT,
        song_id TEXT references songs,
        songplay_id INT GENERATED BY DEFAULT AS IDENTITY UNIQUE,
        start_time TIMESTAMPTZ references time,
        user_agent TEXT,
        user_id INT references users
    );
    """
    )

# INSERT RECORDS
songplay_table_insert = (
    """
    """
    )

user_table_insert = ("""
""")

song_table_insert = (
    """
    INSERT INTO songs(song_id, title, artist_id, year, duration)
    VALUES (%s, %s, %s, %s, %s);
    """
    )

artist_table_insert = (
    """
    INSERT INTO artists(artist_id, artist_name, artist_location, artist_latitude, artist_longitude)
    VALUES (%s, %s, %s, %s, %s);
    """
    )


time_table_insert = ("""
""")

# FIND SONGS
'''
song_select = (
    """
    SELECT s.song_id, a.artist_id
    FROM songs s, artists a
    WHERE s.artist_id = a.artist_id;
    """)
'''
# Need to do with song title, artist name and duration
# Values are based off iterating rows in df from log_data
song_select = (
    """
    SELECT s.song_id, a.artist_id
    FROM songs s
    JOIN artists a USING (artist_id)
    WHERE (a.artist_name, s.title, s.duration)
    = (%s, %s, %s);
    """ 
    )


# QUERY LISTS

# Changed order to match or references gives error
create_table_queries = [user_table_create,
                        artist_table_create,
                        song_table_create,
                        time_table_create,
                        songplay_table_create]

drop_table_queries = [songplay_table_drop,
                      user_table_drop,
                      song_table_drop,
                      artist_table_drop,
                      time_table_drop]
